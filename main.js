/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var f=Object.defineProperty;var T=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var C=Object.prototype.hasOwnProperty;var b=(p,d)=>{for(var t in d)f(p,t,{get:d[t],enumerable:!0})},M=(p,d,t,o)=>{if(d&&typeof d=="object"||typeof d=="function")for(let s of x(d))!C.call(p,s)&&s!==t&&f(p,s,{get:()=>d[s],enumerable:!(o=T(d,s))||o.enumerable});return p};var F=p=>M(f({},"__esModule",{value:!0}),p);var S={};b(S,{default:()=>m});module.exports=F(S);var l=require("obsidian");console.log("Loading Move by Tag Plugin");var h={tagMappings:[],confirmBeforeMove:!0,excludedFolders:[],limitedFolders:[],enableLogging:!0},m=class extends l.Plugin{log(t){this.settings.enableLogging&&console.log(`[Move by Tag] ${t}`)}generateId(){return Date.now().toString(36)+Math.random().toString(36).substr(2)}async onload(){await this.loadSettings(),this.addCommand({id:"move-by-tag",name:"Move by Tag",callback:async()=>{let t=new v(this.app,this);t.onClose=()=>{let o=document.getElementById("folder-suggestions");o&&o.remove()},t.open()}}),this.addCommand({id:"show-file-info",name:"Show File Info",checkCallback:t=>{let o=this.app.workspace.getActiveFile();return o?(t||this.showFileInfo(o),!0):!1}}),this.addSettingTab(new y(this.app,this)),console.log("Move by Tag Plugin loaded")}async onunload(){console.log("Move by Tag Plugin unloaded")}extractTags(t){let o=/#\w+/g;return t.match(o)||[]}async showFileInfo(t){let o=await this.app.vault.read(t);this.showFileInfoDialog(t.path,o)}showFileInfoDialog(t,o){let s=t.split("/").pop(),n=this.extractTags(o),e=`File Name: ${s}
Location: ${t}
Tags: ${n.join(", ")}`;new w(this.app,e).open()}async loadSettings(){var o,s,n,e;let t=await this.loadData();if(console.log("Loaded settings data:",t),this.settings={...h},t&&t.tagMappings&&typeof t.tagMappings=="object"&&!Array.isArray(t.tagMappings)){let a=t.tagMappings,g=[],r={};Object.entries(a).forEach(([c,i])=>{r[i]||(r[i]=[]),r[i].push(c)}),Object.entries(r).forEach(([c,i])=>{g.push({tags:i,folder:c,id:this.generateId()})}),this.settings.tagMappings=g}else t&&t.tagMappings&&(this.settings.tagMappings=t.tagMappings);t&&(this.settings={...this.settings,confirmBeforeMove:(o=t.confirmBeforeMove)!=null?o:h.confirmBeforeMove,excludedFolders:(s=t.excludedFolders)!=null?s:h.excludedFolders,limitedFolders:(n=t.limitedFolders)!=null?n:h.limitedFolders,enableLogging:(e=t.enableLogging)!=null?e:h.enableLogging}),console.log("Loaded excluded folders:",this.settings.excludedFolders),console.log("Loaded limited folders:",this.settings.limitedFolders)}async saveSettings(){console.log("Saving settings data:",this.settings),await this.saveData(this.settings)}},v=class extends l.Modal{constructor(t,o){super(t);this.settings=o.settings,this.plugin=o}async showConfirmationDialog(t){return new Promise(o=>{let s=new l.Modal(this.app);s.contentEl.createEl("h2",{text:"Confirm File Movements"});let n=s.contentEl.createEl("div",{cls:"move-by-tag-confirmation"});n.createEl("p",{text:`About to move ${t.length} files:`});let e=n.createEl("ul");t.slice(0,10).forEach(({file:g,targetPath:r})=>{e.createEl("li",{text:`${g.path} \u2192 ${r}`})}),t.length>10&&n.createEl("p",{text:`...and ${t.length-10} more files`});let a=n.createEl("div",{cls:"move-by-tag-buttons"});a.createEl("button",{text:"Cancel"}).addEventListener("click",()=>{s.close(),o(!1)}),a.createEl("button",{text:"Confirm"}).addEventListener("click",()=>{s.close(),o(!0)}),s.onClose=()=>{let g=document.getElementById("folder-suggestions");g&&g.remove()},s.open()})}onOpen(){let{contentEl:t}=this;t.setText("Move files based on their tags"),this.plugin.log("Opening Move by Tag modal"),new l.Setting(t).addButton(o=>o.setButtonText("Move Files").onClick(async()=>{await this.moveFilesByTag()}))}async moveFilesByTag(){let{vault:t}=this.app;try{this.plugin.log("Starting file movement process...");let o=this.app.vault.getMarkdownFiles().filter(e=>this.settings.limitedFolders.length===0||this.settings.limitedFolders.some(a=>{let g=a==="/"?"/":a.replace(/^\//,"");return(e.path.startsWith("/")?e.path.replace(/^\//,""):e.path).startsWith(g)}));this.plugin.log(`Found ${o.length} markdown files total`);let s=[];for(let e of o){this.plugin.log(`Processing file: ${e.path}`);let a=e.path.startsWith("/")?e.path:"/"+e.path;if(this.settings.excludedFolders.some(r=>{let c=r.startsWith("/")?r:"/"+r;return a.startsWith(c)})){this.plugin.log(`Skipping excluded file: ${e.path}`);continue}let g=await this.extractTags(e);if(this.plugin.log(`Found tags in ${e.path}: ${g.join(", ")||"none"}`),g.length>0){let r=this.getTargetFolderForTags(g);if(r.length>0){let c=r[0].mapping.folder;if(r.length>1&&(this.plugin.log(`Found multiple matching folders for ${e.path}: ${r.map(u=>u.mapping.folder).join(", ")}`),c=await this.showRuleConflictDialog(e,r),!c)){this.plugin.log(`User skipped file ${e.path} due to rule conflict`),new l.Notice(`Skipped ${e.name} due to rule conflict`);continue}this.plugin.log(`Selected target folder: ${c}`);let i=`${c}/${e.name}`;if(await this.app.vault.adapter.exists(i)){this.plugin.log(`File already exists at target location: ${i}`),new l.Notice(`Skipping ${e.name}: File already exists in target location`);continue}this.plugin.log(`Planning to move ${e.path} to ${i}`),s.push({file:e,targetPath:i})}else this.plugin.log(`No matching folder found for tags: ${g.join(", ")}`)}else this.plugin.log(`No tags found in file: ${e.path}`)}if(s.length===0){this.plugin.log("No files to move - no valid tag mappings found"),new l.Notice("No files to move"),this.close();return}if(this.plugin.log(`Found ${s.length} files to move`),this.settings.confirmBeforeMove&&!await this.showConfirmationDialog(s)){new l.Notice("Operation cancelled");return}let n=0;for(let{file:e,targetPath:a}of s)try{await this.app.vault.rename(e,a),n++,this.settings.enableLogging&&console.log(`Moved ${e.path} to ${a}`)}catch(g){new l.Notice(`Failed to move ${e.name}: ${g.message}`)}new l.Notice(`Successfully moved ${n} of ${s.length} files`),this.close()}catch(o){new l.Notice(`Error during file movement: ${o.message}`),console.error("Move by Tag error:",o),this.close()}}async extractTags(t){try{this.plugin.log(`Reading content from file: ${t.path}`);let o=await this.app.vault.read(t),s=/#([\w-]+)/g,n=[],e;for(;(e=s.exec(o))!==null;)n.push(e[1]);return this.plugin.log(`Extracted tags from ${t.path}: ${n.join(", ")||"none"}`),n}catch(o){return this.plugin.log(`Error extracting tags from ${t.path}: ${o.message}`),[]}}getTargetFolderForTags(t){if(this.settings.tagMappings.length===0)return new l.Notice("No mappings defined."),[];this.plugin.log(`Checking tag mappings for tags: ${t.join(", ")}`),this.plugin.log(`Available mappings: ${JSON.stringify(this.settings.tagMappings)}`);let o=t.map(n=>n.toLowerCase()),s=[];for(let n of this.settings.tagMappings){let e=n.tags.map(g=>g.toLowerCase()),a=[];for(let g of n.tags){let r=g.toLowerCase();o.find(i=>i===r||i===r+"s"||i.slice(0,-1)===r)&&a.push(g)}a.length===n.tags.length&&(this.plugin.log(`Found matching mapping: ${n.tags.join(" + ")} \u2192 ${n.folder}`),s.push({mapping:n,matchedTags:a}))}return s.length===0&&this.plugin.log("No matching folder found for tags"),s}async showRuleConflictDialog(t,o){return new Promise(s=>{let n=new l.Modal(this.app);n.titleEl.setText(`"${t.name}"`);let e=n.contentEl.createEl("div");e.createEl("p",{text:"This file matches multiple tag rules. Please select which folder to move it to:"});let a=e.createEl("div");o.forEach(({mapping:r,matchedTags:c})=>{let u=a.createEl("div",{cls:"move-by-tag-rule-option"}).createEl("button",{text:`Move to ${r.folder} (tags: ${r.tags.map(E=>"#"+E).join(" + ")})`,cls:"mod-cta"});u.style.marginBottom="10px",u.addEventListener("click",()=>{n.close(),s(r.folder)})}),e.createEl("button",{text:"Skip this file",cls:"move-by-tag-cancel"}).addEventListener("click",()=>{n.close(),s(null)}),n.onClose=()=>{let r=document.getElementById("folder-suggestions");r&&r.remove()},n.open()})}},w=class extends l.Modal{constructor(t,o){super(t);this.content=o}onOpen(){let{contentEl:t}=this;t.setText(this.content)}onClose(){let{contentEl:t}=this;t.empty()}},y=class extends l.PluginSettingTab{constructor(t,o){super(t,o);this.plugin=o}createFolderInputSetting(t,o,s){let n=null;if(console.log("Creating folder input setting for:",s),new l.Setting(t).setName(s).addText(e=>{e.setPlaceholder(o),e.inputEl.style.width="300px",e.inputEl.setAttribute("data-folder-input",s),e.onChange(async a=>{console.log("Input changed:",a);let g=e.inputEl,r=await this.searchFolders(a);document.activeElement===g&&this.displayFolderSuggestions(r)}),n=e}),!n)throw new Error("Failed to create text component");return n}display(){let{containerEl:t}=this;t.empty(),t.createEl("h3",{text:"General Settings"}),new l.Setting(t).setName("Confirm Before Moving").setDesc("Show confirmation dialog before moving files").addToggle(n=>n.setValue(this.plugin.settings.confirmBeforeMove).onChange(async e=>{this.plugin.settings.confirmBeforeMove=e,await this.plugin.saveSettings()})),new l.Setting(t).setName("Enable Logging").setDesc("Log file movements to console").addToggle(n=>n.setValue(this.plugin.settings.enableLogging).onChange(async e=>{this.plugin.settings.enableLogging=e,await this.plugin.saveSettings()})),t.createEl("h3",{text:"Excluded Folders"}),t.createEl("p",{text:"Files in these folders will not be moved. One folder path per line.",cls:"setting-item-description"}),this.createFolderInputSetting(t,"Exclude folder/subfolder","Exclude folder"),t.createEl("h3",{text:"Specific Folders"}),t.createEl("p",{text:"Files will only be moved from these folders. One folder path per line.",cls:"setting-item-description"}),this.createFolderInputSetting(t,"Specific folder/subfolder","Specific folder"),t.createEl("h3",{text:"Tag Mappings"}),t.createEl("p",{text:"Define where files should be moved based on their tags.",cls:"setting-item-description"}),new l.Setting(t).addButton(n=>n.setButtonText("Add New Mapping").setCta().onClick(()=>this.showNewMappingModal()));let o=t.createDiv("tag-mappings-container");this.plugin.settings.tagMappings.length===0&&o.createEl("p",{text:'No tag mappings defined yet. Click "Add New Mapping" to create one.',cls:"setting-item-description"});let s=[...this.plugin.settings.tagMappings].sort((n,e)=>n.tags[0].localeCompare(e.tags[0]));for(let n of s){let e=n.tags.map(a=>"#"+a).join(" + ");new l.Setting(o).setName(e).setDesc(`Current destination: ${n.folder}`).addButton(a=>a.setButtonText("Edit").onClick(()=>{this.showEditMappingModal(n)}))}}generateId(){return Date.now().toString(36)+Math.random().toString(36).substr(2)}async showNewMappingModal(){let t=new l.Modal(this.app);t.titleEl.setText("Create New Tag Mapping");let o=t.contentEl,s;new l.Setting(o).setName("Tags").setDesc("Enter tags without # symbol, separated by commas. All tags must be present for the rule to apply.").addText(n=>{s=n,n.setPlaceholder("tag1, tag2, tag3")}),this.createFolderInputSetting(o,"folder/subfolder","Destination Folder"),new l.Setting(o).addButton(n=>n.setButtonText("Cancel").onClick(()=>t.close())).addButton(n=>n.setButtonText("Add").setCta().onClick(async()=>{let e=s.getValue().trim(),a=this.createFolderInputSetting(o,"folder/subfolder","Destination Folder").getValue().trim();if(!e||!a){new l.Notice("Both tags and folder are required");return}let g=e.split(",").map(i=>i.trim()).filter(i=>i.length>0);if(g.length===0){new l.Notice("At least one tag is required");return}let r=new Set(g.map(i=>i.toLowerCase()));if(this.plugin.settings.tagMappings.some(i=>i.tags.length===g.length&&i.tags.every(u=>r.has(u.toLowerCase())))){new l.Notice("This tag combination already has a mapping");return}let c={id:this.generateId(),tags:g,folder:a};this.plugin.settings.tagMappings.push(c),await this.plugin.saveSettings(),this.display(),t.close()})),t.onClose=()=>{let n=document.getElementById("folder-suggestions");n&&n.remove()},t.open()}async searchFolders(t){if(!t)return[];let o=this.app.vault.getAllFolders();console.log("All folders:",o);let s=o.map(n=>n.path==="/"?"/":n.path.startsWith("/")?n.path:"/"+n.path);return s=s.filter(n=>n.toLowerCase().includes(t.toLowerCase())).sort(),s}displayFolderSuggestions(t){if(document.querySelectorAll(".folder-suggestions-container").forEach(c=>c.remove()),t.length===0)return;let s=document.activeElement;if(!(s instanceof HTMLInputElement))return;let n=s.closest(".setting-item-control");if(!n)return;n.style.position="relative",console.log("Setting up suggestions container with parent:",n);let e=document.createElement("div");e.className="folder-suggestions-container",e.style.position="absolute",e.style.backgroundColor="var(--background-primary)",e.style.border="1px solid var(--background-modifier-border)",e.style.borderRadius="4px",e.style.zIndex="1000",e.style.boxShadow="0 2px 8px var(--background-modifier-box-shadow)",t.forEach(c=>{let i=document.createElement("div");i.className="folder-suggestion-item",i.textContent=c,i.style.padding="8px 12px",i.style.cursor="pointer",i.style.transition="background-color 0.1s ease",i.style.textAlign="start",i.addEventListener("mouseover",()=>{i.style.backgroundColor="var(--background-modifier-hover)"}),i.addEventListener("mouseout",()=>{i.style.backgroundColor=""}),i.addEventListener("click",()=>{s.value=c;let u=new Event("input",{bubbles:!0});s.dispatchEvent(u),e.remove()}),e.appendChild(i)});let a=s.getBoundingClientRect(),g=n.getBoundingClientRect();n.appendChild(e),e.style.position="absolute",e.style.left="",e.style.right="0",e.style.top=`${a.height+4}px`,e.style.width=`${a.width}px`,e.style.maxHeight="200px",e.style.overflowY="auto",e.style.overflowX="hidden",e.offsetHeight,console.log("Container styles after positioning:",{position:e.style.position,right:e.style.right,left:e.style.left,top:e.style.top,width:e.style.width});let r=c=>{!e.contains(c.target)&&c.target!==s&&(e.remove(),document.removeEventListener("click",r))};setTimeout(()=>{document.addEventListener("click",r)},0)}async showEditMappingModal(t){let o=new l.Modal(this.app);o.titleEl.setText("Edit Tag Mapping");let s=o.contentEl,n;new l.Setting(s).setName("Tags").setDesc("Enter tags without # symbol, separated by commas. All tags must be present for the rule to apply.").addText(e=>{n=e,e.setPlaceholder("tag1, tag2, tag3").setValue(t.tags.join(", "))}),this.createFolderInputSetting(s,"folder/subfolder","Destination Folder").setValue(t.folder),new l.Setting(s).addButton(e=>e.setButtonText("Cancel").onClick(()=>o.close())).addButton(e=>e.setButtonText("Save").setCta().onClick(async()=>{let a=n.getValue().trim(),g=this.createFolderInputSetting(s,"folder/subfolder","Destination Folder").getValue().trim();if(!a||!g){new l.Notice("Both tags and folder are required");return}let r=a.split(",").map(i=>i.trim()).filter(i=>i.length>0);if(r.length===0){new l.Notice("At least one tag is required");return}let c=new Set(r.map(i=>i.toLowerCase()));if(this.plugin.settings.tagMappings.some(i=>i.id!==t.id&&i.tags.length===r.length&&i.tags.every(u=>c.has(u.toLowerCase())))){new l.Notice("This tag combination already has a mapping");return}t.tags=r,t.folder=g,await this.plugin.saveSettings(),this.display(),o.close()})),o.onClose=()=>{let e=document.getElementById("folder-suggestions");e&&e.remove()},o.open()}async showDeleteAllConfirmation(){return new Promise(t=>{let o=new l.Modal(this.app);o.titleEl.setText("Delete All Tag Mappings");let s=o.contentEl;s.createEl("p",{text:"Are you sure you want to delete all tag mappings? This action cannot be undone."}),new l.Setting(s).addButton(n=>n.setButtonText("Cancel").onClick(()=>{o.close(),t(!1)})).addButton(n=>n.setButtonText("Delete All").setWarning().onClick(()=>{o.close(),t(!0)})),o.onClose=()=>{let n=document.getElementById("folder-suggestions");n&&n.remove()},o.open()})}async showDeleteConfirmation(t){return new Promise(o=>{let s=new l.Modal(this.app);s.titleEl.setText("Delete Tag Mapping");let n=s.contentEl,e=t.tags.map(a=>"#"+a).join(" + ");n.createEl("p",{text:`Are you sure you want to delete the mapping for ${e}?
Files with these tags will no longer be moved automatically.`}),new l.Setting(n).addButton(a=>a.setButtonText("Cancel").onClick(()=>{s.close(),o(!1)})).addButton(a=>a.setButtonText("Delete").setWarning().onClick(()=>{s.close(),o(!0)})),s.onClose=()=>{let a=document.getElementById("folder-suggestions");a&&a.remove()},s.open()})}};
