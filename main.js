/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var f=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var E=Object.getOwnPropertyNames;var C=Object.prototype.hasOwnProperty;var b=(p,d)=>{for(var t in d)f(p,t,{get:d[t],enumerable:!0})},M=(p,d,t,s)=>{if(d&&typeof d=="object"||typeof d=="function")for(let n of E(d))!C.call(p,n)&&n!==t&&f(p,n,{get:()=>d[n],enumerable:!(s=x(d,n))||s.enumerable});return p};var F=p=>M(f({},"__esModule",{value:!0}),p);var B={};b(B,{default:()=>m});module.exports=F(B);var l=require("obsidian");console.log("Loading Move by Tag Plugin");var h={tagMappings:[],confirmBeforeMove:!0,excludedFolders:[],limitedFolders:[],enableLogging:!0},m=class extends l.Plugin{log(t){this.settings.enableLogging&&console.log(`[Move by Tag] ${t}`)}generateId(){return Date.now().toString(36)+Math.random().toString(36).substr(2)}async onload(){await this.loadSettings(),this.addCommand({id:"move-by-tag",name:"Move by Tag",callback:async()=>{let t=new w(this.app,this);t.onClose=()=>{let s=document.getElementById("folder-suggestions");s&&s.remove()},t.open()}}),this.addCommand({id:"show-file-info",name:"Show File Info",checkCallback:t=>{let s=this.app.workspace.getActiveFile();return s?(t||this.showFileInfo(s),!0):!1}}),this.addSettingTab(new y(this.app,this)),console.log("Move by Tag Plugin loaded")}async onunload(){console.log("Move by Tag Plugin unloaded")}extractTags(t){let s=/#\w+/g;return t.match(s)||[]}async showFileInfo(t){let s=await this.app.vault.read(t);this.showFileInfoDialog(t.path,s)}showFileInfoDialog(t,s){let n=t.split("/").pop(),e=this.extractTags(s),o=`File Name: ${n}
Location: ${t}
Tags: ${e.join(", ")}`;new v(this.app,o).open()}async loadSettings(){var s,n,e,o;let t=await this.loadData();if(console.log("Loaded settings data:",t),this.settings={...h},t&&t.tagMappings&&typeof t.tagMappings=="object"&&!Array.isArray(t.tagMappings)){let i=t.tagMappings,g=[],r={};Object.entries(i).forEach(([c,a])=>{r[a]||(r[a]=[]),r[a].push(c)}),Object.entries(r).forEach(([c,a])=>{g.push({tags:a,folder:c,id:this.generateId()})}),this.settings.tagMappings=g}else t&&t.tagMappings&&(this.settings.tagMappings=t.tagMappings);t&&(this.settings={...this.settings,confirmBeforeMove:(s=t.confirmBeforeMove)!=null?s:h.confirmBeforeMove,excludedFolders:(n=t.excludedFolders)!=null?n:h.excludedFolders,limitedFolders:(e=t.limitedFolders)!=null?e:h.limitedFolders,enableLogging:(o=t.enableLogging)!=null?o:h.enableLogging}),console.log("Loaded excluded folders:",this.settings.excludedFolders),console.log("Loaded limited folders:",this.settings.limitedFolders)}async saveSettings(){console.log("Saving settings data:",this.settings),await this.saveData(this.settings)}},w=class extends l.Modal{constructor(t,s){super(t);this.settings=s.settings,this.plugin=s}async showConfirmationDialog(t){return new Promise(s=>{let n=new l.Modal(this.app);n.contentEl.createEl("h2",{text:"Confirm File Movements"});let e=n.contentEl.createEl("div",{cls:"move-by-tag-confirmation"});e.createEl("p",{text:`About to move ${t.length} files:`});let o=e.createEl("ul");t.slice(0,10).forEach(({file:g,targetPath:r})=>{o.createEl("li",{text:`${g.path} \u2192 ${r}`})}),t.length>10&&e.createEl("p",{text:`...and ${t.length-10} more files`});let i=e.createEl("div",{cls:"move-by-tag-buttons"});i.createEl("button",{text:"Cancel"}).addEventListener("click",()=>{n.close(),s(!1)}),i.createEl("button",{text:"Confirm"}).addEventListener("click",()=>{n.close(),s(!0)}),n.onClose=()=>{let g=document.getElementById("folder-suggestions");g&&g.remove()},n.open()})}onOpen(){let{contentEl:t}=this;t.setText("Move files based on their tags"),this.plugin.log("Opening Move by Tag modal"),new l.Setting(t).addButton(s=>s.setButtonText("Move Files").onClick(async()=>{await this.moveFilesByTag()}))}async moveFilesByTag(){let{vault:t}=this.app;try{this.plugin.log("Starting file movement process...");let s=this.app.vault.getMarkdownFiles().filter(o=>this.settings.limitedFolders.length===0||this.settings.limitedFolders.some(i=>{let g=i==="/"?"/":i.replace(/^\//,"");return(o.path.startsWith("/")?o.path.replace(/^\//,""):o.path).startsWith(g)}));this.plugin.log(`Found ${s.length} markdown files total`);let n=[];for(let o of s){this.plugin.log(`Processing file: ${o.path}`);let i=o.path.startsWith("/")?o.path:"/"+o.path;if(this.settings.excludedFolders.some(r=>{let c=r.startsWith("/")?r:"/"+r;return i.startsWith(c)})){this.plugin.log(`Skipping excluded file: ${o.path}`);continue}let g=await this.extractTags(o);if(this.plugin.log(`Found tags in ${o.path}: ${g.join(", ")||"none"}`),g.length>0){let r=this.getTargetFolderForTags(g);if(r.length>0){let c=r[0].mapping.folder;if(r.length>1&&(this.plugin.log(`Found multiple matching folders for ${o.path}: ${r.map(u=>u.mapping.folder).join(", ")}`),c=await this.showRuleConflictDialog(o,r),!c)){this.plugin.log(`User skipped file ${o.path} due to rule conflict`),new l.Notice(`Skipped ${o.name} due to rule conflict`);continue}this.plugin.log(`Selected target folder: ${c}`);let a=`${c}/${o.name}`;if(await this.app.vault.adapter.exists(a)){this.plugin.log(`File already exists at target location: ${a}`),new l.Notice(`Skipping ${o.name}: File already exists in target location`);continue}this.plugin.log(`Planning to move ${o.path} to ${a}`),n.push({file:o,targetPath:a})}else this.plugin.log(`No matching folder found for tags: ${g.join(", ")}`)}else this.plugin.log(`No tags found in file: ${o.path}`)}if(n.length===0){this.plugin.log("No files to move - no valid tag mappings found"),new l.Notice("No files to move"),this.close();return}if(this.plugin.log(`Found ${n.length} files to move`),this.settings.confirmBeforeMove&&!await this.showConfirmationDialog(n)){new l.Notice("Operation cancelled");return}let e=0;for(let{file:o,targetPath:i}of n)try{await this.app.vault.rename(o,i),e++,this.settings.enableLogging&&console.log(`Moved ${o.path} to ${i}`)}catch(g){new l.Notice(`Failed to move ${o.name}: ${g.message}`)}new l.Notice(`Successfully moved ${e} of ${n.length} files`),this.close()}catch(s){new l.Notice(`Error during file movement: ${s.message}`),console.error("Move by Tag error:",s),this.close()}}async extractTags(t){try{this.plugin.log(`Reading content from file: ${t.path}`);let s=await this.app.vault.read(t),n=/#([\w-]+)/g,e=[],o;for(;(o=n.exec(s))!==null;)e.push(o[1]);return this.plugin.log(`Extracted tags from ${t.path}: ${e.join(", ")||"none"}`),e}catch(s){return this.plugin.log(`Error extracting tags from ${t.path}: ${s.message}`),[]}}getTargetFolderForTags(t){if(this.settings.tagMappings.length===0)return new l.Notice("No mappings defined."),[];this.plugin.log(`Checking tag mappings for tags: ${t.join(", ")}`),this.plugin.log(`Available mappings: ${JSON.stringify(this.settings.tagMappings)}`);let s=t.map(e=>e.toLowerCase()),n=[];for(let e of this.settings.tagMappings){let o=e.tags.map(g=>g.toLowerCase()),i=[];for(let g of e.tags){let r=g.toLowerCase();s.find(a=>a===r||a===r+"s"||a.slice(0,-1)===r)&&i.push(g)}i.length===e.tags.length&&(this.plugin.log(`Found matching mapping: ${e.tags.join(" + ")} \u2192 ${e.folder}`),n.push({mapping:e,matchedTags:i}))}return n.length===0&&this.plugin.log("No matching folder found for tags"),n}async showRuleConflictDialog(t,s){return new Promise(n=>{let e=new l.Modal(this.app);e.titleEl.setText(`"${t.name}"`);let o=e.contentEl.createEl("div");o.createEl("p",{text:"This file matches multiple tag rules. Please select which folder to move it to:"});let i=o.createEl("div");s.forEach(({mapping:r,matchedTags:c})=>{let u=i.createEl("div",{cls:"move-by-tag-rule-option"}).createEl("button",{text:`Move to ${r.folder} (tags: ${r.tags.map(T=>"#"+T).join(" + ")})`,cls:"mod-cta"});u.style.marginBottom="10px",u.addEventListener("click",()=>{e.close(),n(r.folder)})}),o.createEl("button",{text:"Skip this file",cls:"move-by-tag-cancel"}).addEventListener("click",()=>{e.close(),n(null)}),e.onClose=()=>{let r=document.getElementById("folder-suggestions");r&&r.remove()},e.open()})}},v=class extends l.Modal{constructor(t,s){super(t);this.content=s}onOpen(){let{contentEl:t}=this;t.setText(this.content)}onClose(){let{contentEl:t}=this;t.empty()}},y=class extends l.PluginSettingTab{constructor(t,s){super(t,s);this.plugin=s}createFolderInputSetting(t,s){let n=new l.Setting(t).setName("Destination Folder").addText(e=>{this.folderInput=e,e.setPlaceholder(s),e.inputEl.style.width="300px",e.onChange(async o=>{let i=await this.searchFolders(o);this.displayFolderSuggestions(i)})});return this.folderInput}display(){let{containerEl:t}=this;t.empty(),t.createEl("h3",{text:"General Settings"}),new l.Setting(t).setName("Confirm Before Moving").setDesc("Show confirmation dialog before moving files").addToggle(e=>e.setValue(this.plugin.settings.confirmBeforeMove).onChange(async o=>{this.plugin.settings.confirmBeforeMove=o,await this.plugin.saveSettings()})),new l.Setting(t).setName("Enable Logging").setDesc("Log file movements to console").addToggle(e=>e.setValue(this.plugin.settings.enableLogging).onChange(async o=>{this.plugin.settings.enableLogging=o,await this.plugin.saveSettings()})),t.createEl("h3",{text:"Excluded Folders"}),t.createEl("p",{text:"Files in these folders will not be moved. One folder path per line.",cls:"setting-item-description"}),new l.Setting(t).addTextArea(e=>{let o=this.plugin.settings.excludedFolders||[];e.setValue(o.join(`
`)).setPlaceholder(`folder1/subfolder
folder2`).onChange(async i=>{this.plugin.settings.excludedFolders=i.split(`
`).map(g=>g.trim()).filter(g=>g.length>0),await this.plugin.saveSettings()})}),t.createEl("h3",{text:"Specific Folders"}),t.createEl("p",{text:"Files will only be moved from these folders. One folder path per line.",cls:"setting-item-description"}),new l.Setting(t).addTextArea(e=>{let o=this.plugin.settings.limitedFolders||[];e.setValue(o.join(`
`)).setPlaceholder(`folder1/subfolder
folder2`).onChange(async i=>{this.plugin.settings.limitedFolders=i.split(`
`).map(g=>g.trim()).filter(g=>g.length>0),await this.plugin.saveSettings()})}),t.createEl("h3",{text:"Tag Mappings"}),t.createEl("p",{text:"Define where files should be moved based on their tags.",cls:"setting-item-description"}),new l.Setting(t).addButton(e=>e.setButtonText("Add New Mapping").setCta().onClick(()=>this.showNewMappingModal()));let s=t.createDiv("tag-mappings-container");this.plugin.settings.tagMappings.length===0&&s.createEl("p",{text:'No tag mappings defined yet. Click "Add New Mapping" to create one.',cls:"setting-item-description"});let n=[...this.plugin.settings.tagMappings].sort((e,o)=>e.tags[0].localeCompare(o.tags[0]));for(let e of n){let o=e.tags.map(i=>"#"+i).join(" + ");new l.Setting(s).setName(o).setDesc(`Current destination: ${e.folder}`).addButton(i=>i.setButtonText("Edit").onClick(()=>{this.showEditMappingModal(e)}))}}generateId(){return Date.now().toString(36)+Math.random().toString(36).substr(2)}async showNewMappingModal(){let t=new l.Modal(this.app);t.titleEl.setText("Create New Tag Mapping");let s=t.contentEl,n;new l.Setting(s).setName("Tags").setDesc("Enter tags without # symbol, separated by commas. All tags must be present for the rule to apply.").addText(e=>{n=e,e.setPlaceholder("tag1, tag2, tag3")}),this.createFolderInputSetting(s,"folder/subfolder"),new l.Setting(s).addButton(e=>e.setButtonText("Cancel").onClick(()=>t.close())).addButton(e=>e.setButtonText("Add").setCta().onClick(async()=>{let o=n.getValue().trim(),i=this.folderInput.getValue().trim();if(!o||!i){new l.Notice("Both tags and folder are required");return}let g=o.split(",").map(a=>a.trim()).filter(a=>a.length>0);if(g.length===0){new l.Notice("At least one tag is required");return}let r=new Set(g.map(a=>a.toLowerCase()));if(this.plugin.settings.tagMappings.some(a=>a.tags.length===g.length&&a.tags.every(u=>r.has(u.toLowerCase())))){new l.Notice("This tag combination already has a mapping");return}let c={id:this.generateId(),tags:g,folder:i};this.plugin.settings.tagMappings.push(c),await this.plugin.saveSettings(),this.display(),t.close()})),t.onClose=()=>{let e=document.getElementById("folder-suggestions");e&&e.remove()},t.open()}async searchFolders(t){if(!t)return[];let s=this.app.vault.getAllFolders();console.log("All folders:",s);let n=s.map(e=>e.path==="/"?"/":e.path.startsWith("/")?e.path:"/"+e.path);return n=n.filter(e=>e.toLowerCase().includes(t.toLowerCase())).sort(),n}displayFolderSuggestions(t){if(document.querySelectorAll(".folder-suggestions-container").forEach(c=>c.remove()),t.length===0)return;let n=document.createElement("div");n.className="folder-suggestions-container",n.style.position="absolute",n.style.backgroundColor="var(--background-primary)",n.style.border="1px solid var(--background-modifier-border)",n.style.borderRadius="4px",n.style.zIndex="1000",n.style.boxShadow="0 2px 8px var(--background-modifier-box-shadow)",t.forEach(c=>{let a=document.createElement("div");a.className="folder-suggestion-item",a.textContent=c,a.style.padding="8px 12px",a.style.cursor="pointer",a.style.transition="background-color 0.1s ease",a.addEventListener("mouseover",()=>{a.style.backgroundColor="var(--background-modifier-hover)"}),a.addEventListener("mouseout",()=>{a.style.backgroundColor=""}),a.addEventListener("click",()=>{this.folderInput.setValue(c),n.remove()}),n.appendChild(a)});let e=this.folderInput.inputEl,o=e.getBoundingClientRect(),i=e.closest(".modal"),g=i==null?void 0:i.getBoundingClientRect();n.style.position="fixed",n.style.left=`${o.left}px`,n.style.top=`${o.bottom+4}px`,n.style.width=`${Math.min(g?g.width-40:300,300)}px`,n.style.maxHeight="200px",n.style.overflowY="auto",n.style.overflowX="hidden";let r=c=>{!n.contains(c.target)&&c.target!==e&&(n.remove(),document.removeEventListener("click",r))};setTimeout(()=>{document.addEventListener("click",r)},0),document.body.appendChild(n)}async showEditMappingModal(t){let s=new l.Modal(this.app);s.titleEl.setText("Edit Tag Mapping");let n=s.contentEl,e;new l.Setting(n).setName("Tags").setDesc("Enter tags without # symbol, separated by commas. All tags must be present for the rule to apply.").addText(o=>{e=o,o.setPlaceholder("tag1, tag2, tag3").setValue(t.tags.join(", "))}),this.createFolderInputSetting(n,"folder/subfolder").setValue(t.folder),new l.Setting(n).addButton(o=>o.setButtonText("Cancel").onClick(()=>s.close())).addButton(o=>o.setButtonText("Save").setCta().onClick(async()=>{let i=e.getValue().trim(),g=this.folderInput.getValue().trim();if(!i||!g){new l.Notice("Both tags and folder are required");return}let r=i.split(",").map(a=>a.trim()).filter(a=>a.length>0);if(r.length===0){new l.Notice("At least one tag is required");return}let c=new Set(r.map(a=>a.toLowerCase()));if(this.plugin.settings.tagMappings.some(a=>a.id!==t.id&&a.tags.length===r.length&&a.tags.every(u=>c.has(u.toLowerCase())))){new l.Notice("This tag combination already has a mapping");return}t.tags=r,t.folder=g,await this.plugin.saveSettings(),this.display(),s.close()})),s.onClose=()=>{let o=document.getElementById("folder-suggestions");o&&o.remove()},s.open()}async showDeleteAllConfirmation(){return new Promise(t=>{let s=new l.Modal(this.app);s.titleEl.setText("Delete All Tag Mappings");let n=s.contentEl;n.createEl("p",{text:"Are you sure you want to delete all tag mappings? This action cannot be undone."}),new l.Setting(n).addButton(e=>e.setButtonText("Cancel").onClick(()=>{s.close(),t(!1)})).addButton(e=>e.setButtonText("Delete All").setWarning().onClick(()=>{s.close(),t(!0)})),s.onClose=()=>{let e=document.getElementById("folder-suggestions");e&&e.remove()},s.open()})}async showDeleteConfirmation(t){return new Promise(s=>{let n=new l.Modal(this.app);n.titleEl.setText("Delete Tag Mapping");let e=n.contentEl,o=t.tags.map(i=>"#"+i).join(" + ");e.createEl("p",{text:`Are you sure you want to delete the mapping for ${o}?
Files with these tags will no longer be moved automatically.`}),new l.Setting(e).addButton(i=>i.setButtonText("Cancel").onClick(()=>{n.close(),s(!1)})).addButton(i=>i.setButtonText("Delete").setWarning().onClick(()=>{n.close(),s(!0)})),n.onClose=()=>{let i=document.getElementById("folder-suggestions");i&&i.remove()},n.open()})}};
